import time
import telebot
import pymysql
from telebot import types
import key
from config import host, port, user, password, database

bot = telebot.TeleBot(key, parse_mode=None)

# –í—ã–∑–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –ø–æ—Å—Ç–æ–≤
@bot.message_handler(commands=['start'])
def start(message):

    markup = types.ReplyKeyboardMarkup()
    btn1 = types.KeyboardButton('üèô–ì–æ—Ä–æ–¥–∞')
    btn2 = types.KeyboardButton('üå≤–ü—Ä–∏—Ä–æ–¥–∞')
    btn3 = types.KeyboardButton('ü™Ü–ö—É–ª—å—Ç—É—Ä–∞')
    btn4 = types.KeyboardButton('üìñ–ò—Å—Ç–æ—Ä–∏—è')
    btn5 = types.KeyboardButton('üë®‚Äçüë©‚Äçüëß‚Äçüë¶–õ—é–¥–∏')
    btn6 = types.KeyboardButton('üçÄ–†–∞–∑–Ω–æ–µ')
    btn7 = types.KeyboardButton('‚û°–°–º–æ—Ç—Ä–µ—Ç—å —Å–∞–π—Ç')

    markup.row(btn1, btn2, btn3)
    markup.row(btn4, btn5, btn6)
    markup.row(btn7)
    bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=markup)

# –í—ã–∑–æ–≤ –ø–æ—Å—Ç–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    list = ['üèô–ì–æ—Ä–æ–¥–∞', 'üå≤–ü—Ä–∏—Ä–æ–¥–∞', 'ü™Ü–ö—É–ª—å—Ç—É—Ä–∞', 'üìñ–ò—Å—Ç–æ—Ä–∏—è', 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶–õ—é–¥–∏', 'üçÄ–†–∞–∑–Ω–æ–µ']

    if message.text in list:
        #  –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–∑–æ–≤–∞ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            connection = pymysql.connect(
                host=host,
                port=port,
                user=user,
                password=password,
                database=database,
                cursorclass=pymysql.cursors.DictCursor
            )
            print("successfully connected...")
            print("#" * 20)

            # –î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ–∞–ª–∏–∑—É–µ–º cursor –∏ –ø–æ—Ç–æ–º –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            try:
                with connection.cursor() as cursor:
                    cat = list.index(message.text)+1
                    select_all_rows = f"SELECT * FROM mysite_post WHERE cat_id = {cat}"
                    cursor.execute(select_all_rows)
                    rows = cursor.fetchall()
                    markup = types.InlineKeyboardMarkup()

                    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –±–æ—Ç–µ (–æ—Ç 1 –¥–æ 3 –≤ —Ä—è–¥)
                    def button(i):
                        btn = types.InlineKeyboardButton(rows[i]['title'], callback_data=str(rows[i]['slug']))
                        i = i + 1
                        if i <= len(rows) - 1:
                            btn1 = types.InlineKeyboardButton(rows[i]['title'], callback_data=str(rows[i]['slug']))
                            i = i + 1
                            if i <= len(rows) - 1:
                                 btn2 = types.InlineKeyboardButton(rows[i]['title'], callback_data=str(rows[i]['slug']))
                                 markup.row(btn, btn1, btn2)
                            else:
                                 markup.row(btn, btn1)

                        else:
                            markup.row(btn)

                    i = 0
                    while i <= len(rows)-1:
                        button(i)
                        i = i + 3

                    bot.send_message(message.chat.id, '–í—ã–±–∏—Ä–µ—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –≤–∞—Å –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ' + message.text, reply_markup=markup)

           # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            finally:
                connection.close()
                print("close connected...")
                print("#" * 10)


        except Exception as ex:
            print("Connection refused...")
            print(ex)

    elif message.text == '‚û°–°–º–æ—Ç—Ä–µ—Ç—å —Å–∞–π—Ç':
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏', url='https://openrussianow.ru'))
        bot.send_message(message.chat.id, "–°–∞–π—Ç: openrussianow.ru", reply_markup=markup)

    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –º–µ–Ω—é")
        bot.send_message(message.chat.id, "/start")


@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    # –î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –ø–æ–¥–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        connection = pymysql.connect(
            host=host,
            port=port,
            user=user,
            password=password,
            database=database,
            cursorclass=pymysql.cursors.DictCursor
        )
        print("successfully connected...")
        print("#" * 20)

        # –í—ã–∑—ã–≤–∞–µ–º cursor –¥–ª—è –≤—Å–µ –ø–æ—Å—Ç–æ–≤ –∏ –ø–æ—Ç–æ–º, –≤–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ñ–æ—Ç–æ
        try:
            with connection.cursor() as cursor:

                select_all_rows = f"SELECT * FROM mysite_post"
                cursor.execute(select_all_rows)
                post = cursor.fetchall()

                for el in post:
                    if call.data == str(el['slug']):
                        markup = types.InlineKeyboardMarkup()
                        url = 'https://openrussianow.ru/post/' + str(el['slug'])
                        markup.add(types.InlineKeyboardButton('–°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–∞–π—Ç–µ', url=str(url)))
                        bot.send_message(call.message.chat.id, el['content'][:150] + '...')
                        if el['photo']:
                           bot.send_photo(call.message.chat.id, photo='https://openrussianow.ru/media/' + el['photo'], reply_markup=markup)
                        else:
                           bot.send_message(call.message.chat.id, "–ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –§–æ—Ç–æ", reply_markup=markup)

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        finally:
            connection.close()
            print("close connected...")
            print("#" * 10)

    except Exception as ex:
        print("Connection refused...")
        print(ex)

while True:
    try:
        bot.polling(none_stop=True)

    except Exception as e:
        time.sleep(15)